# GitHub Actions 工作流配置文件

# 工作流名称，显示在 GitHub Actions 中。
name: openwrt-build固件云编译

on:
  workflow_dispatch:
    inputs:
      force-build:
        description: "无论如何构建新固件"
        required: false
        default: "false"
      ssh:
        description: "连接到Actions的SSH-例如你可以自己构建固件"
        required: false
        default: "false"
      # 设置固件默认地址
      ip:
        description: "固件默认地址 (例如: 192.168.1.1)"
        required: true  # 如果你希望这是必填项
        type: string
        default: "192.168.1.77"  # 可选，默认 IP 地址
# 取消注释以下内容以定期运行。注意这里的 cron 表达式不包含秒。
#  schedule:
#    - cron: 0 */18 * * *

env:
  # REPO 表示你想要在此工作流中构建的 OpenWrt 仓库。
  # 你可以修改 REPO_NAME 为你想要的任何名称，但请确保它与其他工作流中的名称不同。
  REPO_NAME: openwrt
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: openwrt-24.10
  BUILD_DEPENDS: "libncurses-dev gawk flex quilt libssl-dev rsync \
    zlib1g-dev unzip time bc bison gcc-multilib g++-multilib \
    gettext texinfo u-boot-tools cpio dosfstools kmod \
    libelf-dev libssl-dev pkg-config device-tree-compiler"
  # CONFIG_FILE 是你自己的编译配置文件的名称，你应该将这些文件上传到工作流仓库的根目录。
  CONFIG_FILE: example.config
  # CUSTOM_SCRIPT_1 是你在更新和安装 feeds 之前要执行的额外 Bash 脚本的名称。
  # CUSTOM_SCRIPT_2 是你在更新和安装 feeds 之后要执行的额外 Bash 脚本的名称。
  # 如果你需要通过这两个脚本来修改固件的初始设置，请将脚本上传到工作流仓库的根目录。
  CUSTOM_SCRIPT_1: example-custom-script-1.sh
  CUSTOM_SCRIPT_2: example-custom-script-2.sh
  # STORE_PRODUCTS 确定是否将所有编译产物上传到工作流制品。
  # 不仅仅是固件，还包括所有编译但未固化到固件中的包。
  STORE_PRODUCTS: false
  # STORE_FIRMWARE 确定是否将固件上传到工作流制品。
  STORE_FIRMWARE: true
  # 以下选项确定固件需要传输的位置。
  COWTRANSFER_FIRMWARE: false
  WETRANSFER_FIRMWARE: false
  RELEASE_FIRMWARE: true
  # 更改为你的时区。
  TIME_ZONE: Asia/Shanghai

jobs:
  check:
    name: 检查源代码更新
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-hash.outputs.cache-hit }}

    steps:
      - name: 获取提交哈希
        id: get-hash
        run: |
          git clone --depth 1 --branch $REPO_BRANCH --single-branch $REPO_URL ./
          echo "commit-hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: 比较提交哈希
        id: cache-hash
        uses: actions/cache@main
        with:
          path: .${{ env.REPO_NAME }}-${{ env.REPO_BRANCH }}-commit-hash
          key: HEAD-${{ steps.get-hash.outputs.commit-hash }}

      - name: 保存新的提交哈希
        if: steps.cache-hash.outputs.cache-hit != 'true'
        run: |
          echo ${{ steps.get-hash.outputs.commit-hash }} | 
            tee .$REPO_NAME-$REPO_BRANCH-commit-hash

  build:
    name: 构建固件
    runs-on: ubuntu-latest
    needs: check
    permissions:
      contents: write
    if: needs.check.outputs.cache-hit != 'true' || github.event.inputs.force-build == 'true'

    steps:
      - name: 释放磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false

      - name: 合并磁盘空间
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 1024
          temp-reserve-mb: 100
          root-reserve-mb: 1024

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理旧的源列表
          sudo rm -rf /etc/apt/sources.list.d/*

          # 添加官方源和必要的第三方源
          echo "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) main universe multiverse" | sudo tee /etc/apt/sources.list
          echo "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc)-updates main universe multiverse" | sudo tee -a /etc/apt/sources.list
          sudo -E apt update -y
          sudo -E apt upgrade -y
          sudo -E apt-get -y install $BUILD_DEPENDS
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get -y clean
          sudo -E apt-get install -y clang
          sudo timedatectl set-timezone $TIME_ZONE

      - name: 检出代码
        uses: actions/checkout@main

      - name: 克隆源代码
        run: |
          df -hT $PWD
          git clone --depth 1 --branch $REPO_BRANCH --single-branch $REPO_URL openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
          echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
          COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
          echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
          COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          cd ..

      - name: 运行自定义脚本1
        run: |
          chmod +x $GITHUB_WORKSPACE/$CUSTOM_SCRIPT_1
          cd openwrt/
          $GITHUB_WORKSPACE/$CUSTOM_SCRIPT_1

      - name: 更新 feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      - name: 安装 feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      - name: 加载自定义配置
        run: |
          [ -e files ] && mv $GITHUB_WORKSPACE/files/ openwrt/files/
          [ -e $CONFIG_FILE ] && mv $GITHUB_WORKSPACE/$CONFIG_FILE openwrt/.config
          cd openwrt/
          make defconfig > /dev/null 2>&1
          SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          sed -i "s/192.168.1.1/$github.event.inputs.ip/g" package/base-files/files/bin/config_generate
      - name: 运行自定义脚本2
        run: |
          chmod +x $GITHUB_WORKSPACE/$CUSTOM_SCRIPT_2
          cd openwrt/
          $GITHUB_WORKSPACE/$CUSTOM_SCRIPT_2

      - name: SSH 连接到 Actions
        uses: P3TERX/ssh2actions@main
        if: github.event.inputs.ssh == 'true' || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: 下载软件包
        id: download-packages
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 编译固件
        id: compile
        run: |
          cd openwrt/
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 检查空间使用情况
        if: (!cancelled())
        run: df -hT

      - name: 上传所有编译产物
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.STORE_PRODUCTS == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin/

      - name: 组织固件相关文件
        id: organize-files
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages/
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 上传固件目录
        uses: actions/upload-artifact@main
        if: steps.organize-files.outputs.status == 'success' && env.STORE_FIRMWARE == 'true' && !cancelled()
        with:
          name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: 上传固件到 Cowtransfer
        id: cowtransfer
        if: steps.organize-files.outputs.status == 'success' && env.COWTRANSFER_FIRMWARE == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::notice file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
          echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

      - name: 上传固件到 WeTransfer
        id: wetransfer
        if: steps.organize-files.outputs.status == 'success' && env.WETRANSFER_FIRMWARE == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::notice file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

      - name: 上传固件到Release
        if: steps.organize-files.outputs.status == 'success' && !cancelled()
        uses: ncipollo/release-action@v1
        with:
          name: R${{ env.DATE }} for ${{ env.DEVICE_TARGET }}
          allowUpdates: true
          tag: ${{ env.DEVICE_TARGET }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE }}/*
          body: |
            **这是为 ${{ env.DEVICE_TARGET }} 编译的OpenWrt固件**
            ### 📒 固件信息
            - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
            - ⚽ 固件源码: ${{ env.REPO_URL }}
            - 💝 源码分支: ${{ env.REPO_BRANCH }}
            - 🚀 内核版本: ${{ env.KERNEL }}
            - 🌐 默认地址: ${{ github.event.inputs.ip }}
            ### 🧊 固件版本
            - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
            - ${{ env.COMMIT_AUTHOR }}
            - ${{ env.COMMIT_DATE }}
            - ${{ env.COMMIT_MESSAGE }}
            - ${{ env.COMMIT_HASH }}

  clean:
    name: 清理旧资产
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write

    steps:
      - name: 删除工作流运行
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 1

      - name: 移除旧版本
        uses: dev-drprasad/delete-older-releases@master
        if: env.RELEASE_FIRMWARE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
